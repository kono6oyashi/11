1:
#include <iostream>
#include <fstream>
#include <stdio.h>
using namespace std;
struct Node {
    int key;
    Node* prev;
    Node* next;
};
void append(Node** head, int key) {
    Node* newNode = new Node;
    newNode->key = key;
    newNode->next = nullptr;
    newNode->prev = nullptr;

    if (*head == nullptr) {
        *head = newNode;
    }
    else {
        Node* temp = *head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
        newNode->prev = temp;
    }
}
void createList(Node** head) {
    int n;
    cout << "Введите количество элементов для создания списка: ";
    cin >> n;
    *head = nullptr;
    for (int i = 0; i < n; i++) {
        int value;
        cout << "Введите значение для элемента " << i + 1 << ": ";
        cin >> value;
        append(head, value);
    }
}
void printList(Node* head) {
    if (head == nullptr) {
        cout << "Список пустой" << endl;
        return;
    }
    Node* temp = head;
    cout << "Список: ";
    while (temp != nullptr) {
        cout << temp->key << " ";
        temp = temp->next;
    }
    cout << endl;
}

void removeNodes(Node** head, int startPos, int K) {
    if (*head == nullptr) {
        cout << "Список пустой, удалять нечего." << endl;
        return;
    }

    Node* temp = *head;
    int pos = 1;
    while (temp != nullptr && pos < startPos) {
        temp = temp->next;
        pos++;
    }

    if (temp == nullptr) {
        cout << "Неверная позиция для удаления." << endl;
        return;
    }

    for (int i = 0; i < K && temp != nullptr; i++) {
        Node* toDelete = temp;
        temp = temp->next;

        if (toDelete->prev != nullptr)
            toDelete->prev->next = toDelete->next;
        else
            *head = toDelete->next;

        if (toDelete->next != nullptr)
            toDelete->next->prev = toDelete->prev;

        delete toDelete;
    }
}

void addNodes(Node** head, int startPos, int K) {
    if (*head == nullptr) {
        for (int i = 0; i < K; i++) {
            int value;
            cout << "Введите значение для нового элемента " << i + 1 << ": ";
            cin >> value;
            append(head, value);
        }
        return;
    }
    Node* temp = *head;
    int pos = 1;
    while (temp != nullptr && pos < startPos) {
        temp = temp->next;
        pos++;
    }
    if (temp == nullptr) {
        for (int i = 0; i < K; i++) {
            int value;
            cout << "Введите значение для нового элемента " << i + 1 << ": ";
            cin >> value;
            append(head, value);
        }
    }
    else {
        for (int i = 0; i < K; i++) {
            int value;
            cout << "Введите значение для нового элемента " << i + 1 << ": ";
            cin >> value;
            Node* newNode = new Node;
            newNode->key = value;
            newNode->next = temp;
            newNode->prev = temp->prev;

            if (temp->prev != nullptr)
                temp->prev->next = newNode;
            else
                *head = newNode;

            temp->prev = newNode;
        }
    }
}
void writeListToFile(Node* head, const char* filename) {
    ofstream fout(filename);
    if (!fout) {
        cout << "Ошибка открытия файла для записи." << endl;
        return;
    }
    Node* temp = head;
    while (temp != nullptr) {
        fout << temp->key << endl;
        temp = temp->next;
    }
    fout.close();
    cout << "Список записан в файл: " << filename << endl;
}
void destroyList(Node** head) {
    Node* temp = *head;
    while (temp != nullptr) {
        Node* next = temp->next;
        delete temp;
        temp = next;
    }
    *head = nullptr;
}
void restoreListFromFile(Node** head, const char* filename) {
    ifstream fin(filename);
    if (!fin) {
        cout << "Ошибка открытия файла для восстановления." << endl;
        return;
    }
    int value;
    *head = nullptr;
    while (fin >> value) {
        append(head, value);
    }
    fin.close();
    cout << "Список восстановлен из файла: " << filename << endl;
}

int main() {
    Node* list = nullptr;
    const char* filename = "list.txt";
    createList(&list);
    printList(list);
    int startPos, K;
    cout << "Введите позицию (начиная с 1) для удаления элементов: ";
    cin >> startPos;
    cout << "Введите количество элементов для удаления: ";
    cin >> K;
    removeNodes(&list, startPos, K);
    printList(list);
    cout << "Введите позицию (начиная с 1) для добавления элементов: ";
    cin >> startPos;
    cout << "Введите количество элементов для добавления: ";
    cin >> K;
    addNodes(&list, startPos, K);
    printList(list);
    writeListToFile(list, filename);
    destroyList(&list);
    printList(list);
    restoreListFromFile(&list, filename);
    printList(list);
    destroyList(&list);

    return 0;
}
2:
#include <iostream>
#include <fstream>
#include <stdio.h>

using namespace std;
struct Node {
    int key;
    Node* next;
};

void push(Node*& top, int key) {
    Node* newNode = new Node;
    newNode->key = key;
    newNode->next = top;
    top = newNode;
}

bool pop(Node*& top, int& key) {
    if (top == NULL)
        return false;
    Node* temp = top;
    key = top->key;
    top = top->next;
    delete temp;
    return true;
}

void printStack(Node* top) {
    if (top == NULL) {
        cout << "Стек пустой" << endl;
        return;
    }
    cout << "Стек: ";
    Node* cur = top;
    while (cur != NULL) {
        cout << cur->key << " ";
        cur = cur->next;
    }
    cout << endl;
}
Node* createStack() {
    Node* top = NULL;
    int n;
    cout << "Введите количество элементов стека: ";
    cin >> n;
    for (int i = 0; i < n; i++) {
        int key;
        cout << "Введите элемент " << i + 1 << ": ";
        cin >> key;
        push(top, key);
    }
    return top;
}
void removeKElements(Node*& top, int pos, int K) {
    int count = pos - 1;
    int* temp = new int[count];
    int value;
    for (int i = 0; i < count; i++) {
        if (pop(top, value))
            temp[i] = value;
        else
            break;
    }
    for (int j = 0; j < K; j++) {
        if (!pop(top, value))
            break;
    }
    for (int i = count - 1; i >= 0; i--) {
        push(top, temp[i]);
    }
    delete[] temp;
}

void insertKElements(Node*& top, int pos, int K) {
    int count = pos - 1;
    int* temp = new int[count];
    int value;
    for (int i = 0; i < count; i++) {
        if (pop(top, value))
            temp[i] = value;
        else
            break;
    }
    int* newElems = new int[K];
    for (int i = 0; i < K; i++) {
        cout << "Введите новый элемент " << i + 1 << ": ";
        cin >> newElems[i];
    }
    for (int i = K - 1; i >= 0; i--) {
        push(top, newElems[i]);
    }
    delete[] newElems;
    for (int i = count - 1; i >= 0; i--) {
        push(top, temp[i]);
    }
    delete[] temp;
}

void writeStackToFile(Node* top, const char* filename) {
    ofstream fout(filename);
    if (!fout) {
        cout << "Ошибка открытия файла для записи." << endl;
        return;
    }
    int count = 0;
    Node* cur = top;
    while (cur != NULL) {
        count++;
        cur = cur->next;
    }
    fout << count << endl;
    cur = top;
    while (cur != NULL) {
        fout << cur->key << endl;
        cur = cur->next;
    }
    fout.close();
}
Node* restoreStackFromFile(const char* filename) {
    ifstream fin(filename);
    if (!fin) {
        cout << "Ошибка открытия файла для чтения." << endl;
        return NULL;
    }
    int count;
    fin >> count;
    int* arr = new int[count];
    for (int i = 0; i < count; i++) {
        fin >> arr[i];
    }
    fin.close();
    Node* top = NULL;
    for (int i = count - 1; i >= 0; i--) {
        push(top, arr[i]);
    }
    delete[] arr;
    return top;
}
void destroyStack(Node*& top) {
    int value;
    while (pop(top, value))
        ;
}

int main() {
    Node* stack = createStack();
    cout << "Исходный стек:" << endl;
    printStack(stack);
    int pos, K;
    cout << "Введите позицию (номер элемента от вершины стека) для удаления элементов: ";
    cin >> pos;
    cout << "Введите количество элементов для удаления: ";
    cin >> K;
    removeKElements(stack, pos, K);
    cout << "Стек после удаления:" << endl;
    printStack(stack);
    cout << "Введите позицию (номер элемента от вершины стека) для добавления новых элементов: ";
    cin >> pos;
    cout << "Введите количество элементов для добавления: ";
    cin >> K;
    insertKElements(stack, pos, K);
    cout << "Стек после добавления:" << endl;
    printStack(stack);
    const char* filename = "stack.txt";
    writeStackToFile(stack, filename);
    cout << "Стек записан в файл \"" << filename << "\"." << endl;
    destroyStack(stack);
    cout << "Стек уничтожен. При выводе:" << endl;
    printStack(stack);
    stack = restoreStackFromFile(filename);
    cout << "Стек восстановлен из файла:" << endl;
    printStack(stack);
    destroyStack(stack);

    return 0;
}
