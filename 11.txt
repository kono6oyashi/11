#include <iostream>
#include <fstream>
#include <stdio.h>

using namespace std;

struct Node {
    int key;
    Node* next;
};

Node* createQueue() {
    return nullptr;
}

void enqueue(Node*& head, int key) {
    Node* newNode = new Node;
    newNode->key = key;
    newNode->next = nullptr;
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
    }
}

void printQueue(Node* head) {
    if (head == nullptr) {
        cout << "Очередь пустая" << endl;
        return;
    }
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->key << " ";
        temp = temp->next;
    }
    cout << endl;
}

void removeElements(Node*& head, int pos, int K) {
    if (head == nullptr || pos < 1 || K <= 0) return;
    Node **cur = &head;
    int currentPos = 1;
    while (*cur && currentPos < pos) {
        cur = &((*cur)->next);
        currentPos++;
    }
    if (*cur == nullptr) return;
    for (int i = 0; i < K && *cur; i++) {
        Node* temp = *cur;
        *cur = (*cur)->next;
        delete temp;
    }
}
void addElements(Node*& head, int pos, int K) {
    if (K <= 0) return;
    if (pos <= 1) {
        for (int i = 0; i < K; i++) {
            int key;
            cout << "Введите ключ для нового элемента: ";
            cin >> key;
            Node* newNode = new Node;
            newNode->key = key;
            newNode->next = head;
            head = newNode;
        }
    } else {
        Node* temp = head;
        int currentPos = 1;
        while (temp != nullptr && currentPos < pos - 1) {
            temp = temp->next;
            currentPos++;
        }
        if (temp == nullptr) {
            for (int i = 0; i < K; i++) {
                int key;
                cout << "Введите ключ для нового элемента: ";
                cin >> key;
                enqueue(head, key);
            }
        } else {
            for (int i = 0; i < K; i++) {
                int key;
                cout << "Введите ключ для нового элемента: ";
                cin >> key;
                Node* newNode = new Node;
                newNode->key = key;
                newNode->next = temp->next;
                temp->next = newNode;
                temp = newNode;
            }
        }
    }
}

void writeQueueToFile(Node* head, const char* filename) {
    ofstream fout(filename);
    if (!fout) {
        cout << "Ошибка открытия файла для записи" << endl;
        return;
    }
    int count = 0;
    Node* temp = head;
    while (temp) {
        count++;
        temp = temp->next;
    }
    fout << count << endl;
    temp = head;
    while (temp) {
        fout << temp->key << " ";
        temp = temp->next;
    }
    fout.close();
    cout << "Очередь записана в файл " << filename << endl;
}

void destroyQueue(Node*& head) {
    while (head) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
}

Node* readQueueFromFile(const char* filename) {
    ifstream fin(filename);
    if (!fin) {
        cout << "Ошибка открытия файла для чтения" << endl;
        return nullptr;
    }
    int count;
    fin >> count;
    Node* head = createQueue();
    for (int i = 0; i < count; i++) {
        int key;
        fin >> key;
        enqueue(head, key);
    }
    fin.close();
    return head;
}

int main() {
    Node* queue = createQueue();
    int n;
    cout << "Сколько элементов добавить в начальную очередь? ";
    cin >> n;
    for (int i = 0; i < n; i++) {
        int key;
        cout << "Введите ключ элемента " << i+1 << ": ";
        cin >> key;
        enqueue(queue, key);
    }
    cout << "Начальная очередь: ";
    printQueue(queue);
    int pos, K;
    cout << "Введите позицию для удаления элементов (начиная с 1): ";
    cin >> pos;
    cout << "Введите количество удаляемых элементов: ";
    cin >> K;
    removeElements(queue, pos, K);
    cout << "Очередь после удаления: ";
    printQueue(queue);
    cout << "Введите позицию для добавления элементов (начиная с 1): ";
    cin >> pos;
    cout << "Введите количество добавляемых элементов: ";
    cin >> K;
    addElements(queue, pos, K);
    cout << "Очередь после добавления: ";
    printQueue(queue);
    const char* filename = "queue.txt";
    writeQueueToFile(queue, filename);
    destroyQueue(queue);
    cout << "После уничтожения очереди: ";
    printQueue(queue);
    queue = readQueueFromFile(filename);
    cout << "Восстановленная очередь: ";
    printQueue(queue);
    destroyQueue(queue);
    return 0;
}
